package com.springerNautre.watermark.controller;

import com.springerNautre.watermark.dto.Document;
import com.springerNautre.watermark.dto.JobStatus;
import com.springerNautre.watermark.exception.WatermarkException;
import com.springerNautre.watermark.services.WatermarkService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * Created by ganeshnagarajan on 1/12/17.
 */
@RestController
@RequestMapping(value="/api")
public class WatermarkController {
    private static final Logger log = LoggerFactory.getLogger(WatermarkController.class);

    @Autowired
    WatermarkService watermarkService;

    /**
     * For the given content this endpoint saves the document into the store and returns an autogenerated id
     * for future reference/retrieval
     * @param doc
     * @return Long
     */
    @RequestMapping(value = "/submit",  method = RequestMethod.POST, produces = "application/json;charset=UTF-8", consumes = "application/json;charset=UTF-8")
    public Long submitForWatermarking(@Valid @RequestBody Document doc){
        log.info("Request to submit for watermark for " + doc);
        long ticket = watermarkService.addDocument(doc);
        log.info("Request submitted. Ticket generated " + ticket);
        return ticket;
    }

    /**
     * For the given Ticket this endpoint fetches the job status from the store
     * @param ticket
     * @return JobStatus
     */
    @RequestMapping(value = "/status/{ticket}",  method = RequestMethod.GET, produces = "application/json;charset=UTF-8")
    public JobStatus getJobStatus(@PathVariable(value = "ticket") long ticket){
        log.info("Request to fetch the Job Status for the ticket " + ticket);
        JobStatus status = watermarkService.getStatus(ticket);
        log.info("Status for the id " + ticket + " : " + status);
        return status;
    }

    /**
     *  For the given ticket this enpoint returns the document if the watermarking document is finished
     * @param ticket
     * @return Document
     */
    @RequestMapping(value = "/getDoc/{ticket}",  method = RequestMethod.GET, produces = "application/json;charset=UTF-8")
    public Document getWatermarkedDocument(@PathVariable(value = "ticket") long ticket) {
        log.info("Request to fetch the watermarked document" + ticket);
        Document doc = watermarkService.getWatermarkedDocument(ticket);
        log.info("Watermarked document for the id " + ticket + " : " + doc);
        return doc;
    }
}
